@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix dcterms: <http://purl.org/dc/terms/>.
@prefix odrl: <http://www.w3.org/ns/odrl/2/>.
@prefix pack: <https://example.org/ns/package#>.
@prefix policy: <https://example.org/ns/policy#>.
@prefix sign: <https://example.org/ns/signature#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rot: <https://purl.org/krdb-core/rot/rot#> .

# Design question - should systems be unpackaging things as much as possible before passing them along?

# If a package is trusted the contents can be unpacked.
{
  ?pack pack:packages ?package ;
    pack:trusted true .
  
  ?package log:includes { [] pack:content ?content } .
} => ?content .

# A package is trusted if it is asserted by a trusted party.
{
  ?pack pack:assertedBy ?X .
  
  # This is a bit hacky
  ?user rot:trusts ?X .
  :globals :user ?user .
} => {
  ?pack pack:trusted true .
} .

:globals :user :Jesse .
:Jesse rot:trusts <http://localhost:3456/flandersgov/id> .

# This can work for nested packages because signatures cannot be
# spoofed after things have been passed along.
# {
#   ?package log:includes {
#     [] sign:hasContentSignature [
#       sign:issuer ?issuer
#     ] .
#   } ;
#     # We can add this as data is incoming for now as well.
#     :hasValidatedSignature true .
# } => {
#   ?pack pack:assertedBy ?agent .
# } .

# This is a hack; we really want to make this a globally scoped thing like above.
{
  ?package log:includes {
     [] sign:hasContentSignature [
      sign:issuer ?issuer ;
      sign:signatureHasBeenVerified true ;
    ] .
  } ;
    # We can add this as data is incoming for now as well.
    # :hasValidatedSignature true .
} => {
  ?pack pack:assertedBy ?issuer .
} .

# This only works for outer signatures; but could become an outer signature
# by having an agent pass that data along.
{
  ?package log:includes {
    [] sign:hasContentSignature [
      sign:issuer ?issuer
    ] .
  } ;
    # This triple should be added by Wout's work when the data is incoming
    :hasAuthenticatedRequest true .
} => {
  ?pack pack:assertedBy ?agent .
} .

